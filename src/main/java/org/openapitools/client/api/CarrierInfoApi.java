/*
 * Shipping API
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Carrier;
import org.openapitools.client.model.CarrierFacilityRequest;
import org.openapitools.client.model.CarrierFacilityResponse;
import org.openapitools.client.model.CarrierRule;
import org.openapitools.client.model.CrossBorderQuotesErrors;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ISOCountryCode;
import org.openapitools.client.model.InlineResponse200;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CarrierInfoApi {
    private ApiClient localVarApiClient;

    public CarrierInfoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CarrierInfoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getCarrierFacilities
     * @param carrierFacilityRequest  (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarrierFacilitiesCall(CarrierFacilityRequest carrierFacilityRequest, Boolean xPBUnifiedErrorStructure, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = carrierFacilityRequest;

        // create path and map variables
        String localVarPath = "/v1/carrier-facility";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPBUnifiedErrorStructure != null) {
            localVarHeaderParams.put("X-PB-UnifiedErrorStructure", localVarApiClient.parameterToString(xPBUnifiedErrorStructure));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2ClientCredentials" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCarrierFacilitiesValidateBeforeCall(CarrierFacilityRequest carrierFacilityRequest, Boolean xPBUnifiedErrorStructure, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'carrierFacilityRequest' is set
        if (carrierFacilityRequest == null) {
            throw new ApiException("Missing the required parameter 'carrierFacilityRequest' when calling getCarrierFacilities(Async)");
        }
        

        okhttp3.Call localVarCall = getCarrierFacilitiesCall(carrierFacilityRequest, xPBUnifiedErrorStructure, _callback);
        return localVarCall;

    }

    /**
     * Find Carrier Facilities
     * This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.
     * @param carrierFacilityRequest  (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @return CarrierFacilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CarrierFacilityResponse getCarrierFacilities(CarrierFacilityRequest carrierFacilityRequest, Boolean xPBUnifiedErrorStructure) throws ApiException {
        ApiResponse<CarrierFacilityResponse> localVarResp = getCarrierFacilitiesWithHttpInfo(carrierFacilityRequest, xPBUnifiedErrorStructure);
        return localVarResp.getData();
    }

    /**
     * Find Carrier Facilities
     * This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.
     * @param carrierFacilityRequest  (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @return ApiResponse&lt;CarrierFacilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CarrierFacilityResponse> getCarrierFacilitiesWithHttpInfo(CarrierFacilityRequest carrierFacilityRequest, Boolean xPBUnifiedErrorStructure) throws ApiException {
        okhttp3.Call localVarCall = getCarrierFacilitiesValidateBeforeCall(carrierFacilityRequest, xPBUnifiedErrorStructure, null);
        Type localVarReturnType = new TypeToken<CarrierFacilityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find Carrier Facilities (asynchronously)
     * This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.
     * @param carrierFacilityRequest  (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarrierFacilitiesAsync(CarrierFacilityRequest carrierFacilityRequest, Boolean xPBUnifiedErrorStructure, final ApiCallback<CarrierFacilityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCarrierFacilitiesValidateBeforeCall(carrierFacilityRequest, xPBUnifiedErrorStructure, _callback);
        Type localVarReturnType = new TypeToken<CarrierFacilityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCarrierLicenseAgreement
     * @param carrier The carrier name. Currently this must be set to: UPS (required)
     * @param originCountryCode The two-character ISO country code for the country where the shipment originates. (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarrierLicenseAgreementCall(String carrier, ISOCountryCode originCountryCode, Boolean xPBUnifiedErrorStructure, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/carrier/license-agreements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (carrier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carrier", carrier));
        }

        if (originCountryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originCountryCode", originCountryCode));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPBUnifiedErrorStructure != null) {
            localVarHeaderParams.put("X-PB-UnifiedErrorStructure", localVarApiClient.parameterToString(xPBUnifiedErrorStructure));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2ClientCredentials" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCarrierLicenseAgreementValidateBeforeCall(String carrier, ISOCountryCode originCountryCode, Boolean xPBUnifiedErrorStructure, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'carrier' is set
        if (carrier == null) {
            throw new ApiException("Missing the required parameter 'carrier' when calling getCarrierLicenseAgreement(Async)");
        }
        
        // verify the required parameter 'originCountryCode' is set
        if (originCountryCode == null) {
            throw new ApiException("Missing the required parameter 'originCountryCode' when calling getCarrierLicenseAgreement(Async)");
        }
        

        okhttp3.Call localVarCall = getCarrierLicenseAgreementCall(carrier, originCountryCode, xPBUnifiedErrorStructure, _callback);
        return localVarCall;

    }

    /**
     * This operation retrieves a carrier&#39;s license agreement.
     * This operation retrieves a carrier&#39;s license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).
     * @param carrier The carrier name. Currently this must be set to: UPS (required)
     * @param originCountryCode The two-character ISO country code for the country where the shipment originates. (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 getCarrierLicenseAgreement(String carrier, ISOCountryCode originCountryCode, Boolean xPBUnifiedErrorStructure) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = getCarrierLicenseAgreementWithHttpInfo(carrier, originCountryCode, xPBUnifiedErrorStructure);
        return localVarResp.getData();
    }

    /**
     * This operation retrieves a carrier&#39;s license agreement.
     * This operation retrieves a carrier&#39;s license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).
     * @param carrier The carrier name. Currently this must be set to: UPS (required)
     * @param originCountryCode The two-character ISO country code for the country where the shipment originates. (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> getCarrierLicenseAgreementWithHttpInfo(String carrier, ISOCountryCode originCountryCode, Boolean xPBUnifiedErrorStructure) throws ApiException {
        okhttp3.Call localVarCall = getCarrierLicenseAgreementValidateBeforeCall(carrier, originCountryCode, xPBUnifiedErrorStructure, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This operation retrieves a carrier&#39;s license agreement. (asynchronously)
     * This operation retrieves a carrier&#39;s license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).
     * @param carrier The carrier name. Currently this must be set to: UPS (required)
     * @param originCountryCode The two-character ISO country code for the country where the shipment originates. (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarrierLicenseAgreementAsync(String carrier, ISOCountryCode originCountryCode, Boolean xPBUnifiedErrorStructure, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCarrierLicenseAgreementValidateBeforeCall(carrier, originCountryCode, xPBUnifiedErrorStructure, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCarrierServiceRules
     * @param carrier The carrier name. **Currently this must be set to: USPS**  (required)
     * @param originCountryCode The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates. (required)
     * @param destinationCountryCode The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address. (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param rateTypeId The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)
     * @param futureShipmentDate If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)
     * @param returnShipment If set to true, provides only services applicable for return shipment. (optional)
     * @param compactResponse If set to true, returns only summary, without special service details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> For a list of all PB Shipping APIs error codes, please see [Error Codes](https://shipping.pitneybowes.com/reference/error-codes.html) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarrierServiceRulesCall(Carrier carrier, ISOCountryCode originCountryCode, ISOCountryCode destinationCountryCode, Boolean xPBUnifiedErrorStructure, String rateTypeId, String futureShipmentDate, OffsetDateTime returnShipment, Boolean compactResponse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/information/rules/rating-services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (carrier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carrier", carrier));
        }

        if (originCountryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originCountryCode", originCountryCode));
        }

        if (destinationCountryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationCountryCode", destinationCountryCode));
        }

        if (rateTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rateTypeId", rateTypeId));
        }

        if (futureShipmentDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("futureShipmentDate", futureShipmentDate));
        }

        if (returnShipment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnShipment", returnShipment));
        }

        if (compactResponse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compactResponse", compactResponse));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPBUnifiedErrorStructure != null) {
            localVarHeaderParams.put("X-PB-UnifiedErrorStructure", localVarApiClient.parameterToString(xPBUnifiedErrorStructure));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2ClientCredentials" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCarrierServiceRulesValidateBeforeCall(Carrier carrier, ISOCountryCode originCountryCode, ISOCountryCode destinationCountryCode, Boolean xPBUnifiedErrorStructure, String rateTypeId, String futureShipmentDate, OffsetDateTime returnShipment, Boolean compactResponse, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'carrier' is set
        if (carrier == null) {
            throw new ApiException("Missing the required parameter 'carrier' when calling getCarrierServiceRules(Async)");
        }
        
        // verify the required parameter 'originCountryCode' is set
        if (originCountryCode == null) {
            throw new ApiException("Missing the required parameter 'originCountryCode' when calling getCarrierServiceRules(Async)");
        }
        
        // verify the required parameter 'destinationCountryCode' is set
        if (destinationCountryCode == null) {
            throw new ApiException("Missing the required parameter 'destinationCountryCode' when calling getCarrierServiceRules(Async)");
        }
        

        okhttp3.Call localVarCall = getCarrierServiceRulesCall(carrier, originCountryCode, destinationCountryCode, xPBUnifiedErrorStructure, rateTypeId, futureShipmentDate, returnShipment, compactResponse, _callback);
        return localVarCall;

    }

    /**
     * Retrieves the rules governing the carrier&#39;s services.
     * This operation retrieves the rules governing the carrier&#39;s services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)
     * @param carrier The carrier name. **Currently this must be set to: USPS**  (required)
     * @param originCountryCode The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates. (required)
     * @param destinationCountryCode The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address. (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param rateTypeId The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)
     * @param futureShipmentDate If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)
     * @param returnShipment If set to true, provides only services applicable for return shipment. (optional)
     * @param compactResponse If set to true, returns only summary, without special service details. (optional)
     * @return CarrierRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> For a list of all PB Shipping APIs error codes, please see [Error Codes](https://shipping.pitneybowes.com/reference/error-codes.html) </td><td>  -  </td></tr>
     </table>
     */
    public CarrierRule getCarrierServiceRules(Carrier carrier, ISOCountryCode originCountryCode, ISOCountryCode destinationCountryCode, Boolean xPBUnifiedErrorStructure, String rateTypeId, String futureShipmentDate, OffsetDateTime returnShipment, Boolean compactResponse) throws ApiException {
        ApiResponse<CarrierRule> localVarResp = getCarrierServiceRulesWithHttpInfo(carrier, originCountryCode, destinationCountryCode, xPBUnifiedErrorStructure, rateTypeId, futureShipmentDate, returnShipment, compactResponse);
        return localVarResp.getData();
    }

    /**
     * Retrieves the rules governing the carrier&#39;s services.
     * This operation retrieves the rules governing the carrier&#39;s services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)
     * @param carrier The carrier name. **Currently this must be set to: USPS**  (required)
     * @param originCountryCode The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates. (required)
     * @param destinationCountryCode The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address. (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param rateTypeId The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)
     * @param futureShipmentDate If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)
     * @param returnShipment If set to true, provides only services applicable for return shipment. (optional)
     * @param compactResponse If set to true, returns only summary, without special service details. (optional)
     * @return ApiResponse&lt;CarrierRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> For a list of all PB Shipping APIs error codes, please see [Error Codes](https://shipping.pitneybowes.com/reference/error-codes.html) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CarrierRule> getCarrierServiceRulesWithHttpInfo(Carrier carrier, ISOCountryCode originCountryCode, ISOCountryCode destinationCountryCode, Boolean xPBUnifiedErrorStructure, String rateTypeId, String futureShipmentDate, OffsetDateTime returnShipment, Boolean compactResponse) throws ApiException {
        okhttp3.Call localVarCall = getCarrierServiceRulesValidateBeforeCall(carrier, originCountryCode, destinationCountryCode, xPBUnifiedErrorStructure, rateTypeId, futureShipmentDate, returnShipment, compactResponse, null);
        Type localVarReturnType = new TypeToken<CarrierRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the rules governing the carrier&#39;s services. (asynchronously)
     * This operation retrieves the rules governing the carrier&#39;s services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)
     * @param carrier The carrier name. **Currently this must be set to: USPS**  (required)
     * @param originCountryCode The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates. (required)
     * @param destinationCountryCode The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address. (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param rateTypeId The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)
     * @param futureShipmentDate If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)
     * @param returnShipment If set to true, provides only services applicable for return shipment. (optional)
     * @param compactResponse If set to true, returns only summary, without special service details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> For a list of all PB Shipping APIs error codes, please see [Error Codes](https://shipping.pitneybowes.com/reference/error-codes.html) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarrierServiceRulesAsync(Carrier carrier, ISOCountryCode originCountryCode, ISOCountryCode destinationCountryCode, Boolean xPBUnifiedErrorStructure, String rateTypeId, String futureShipmentDate, OffsetDateTime returnShipment, Boolean compactResponse, final ApiCallback<CarrierRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCarrierServiceRulesValidateBeforeCall(carrier, originCountryCode, destinationCountryCode, xPBUnifiedErrorStructure, rateTypeId, futureShipmentDate, returnShipment, compactResponse, _callback);
        Type localVarReturnType = new TypeToken<CarrierRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCarrierSupportedDestination
     * @param carrier The carrier name. Currently this must be set to: USPS (required)
     * @param originCountryCode The two-character ISO country code for the country where the shipment originates. (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarrierSupportedDestinationCall(Carrier carrier, ISOCountryCode originCountryCode, Boolean xPBUnifiedErrorStructure, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (carrier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carrier", carrier));
        }

        if (originCountryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originCountryCode", originCountryCode));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPBUnifiedErrorStructure != null) {
            localVarHeaderParams.put("X-PB-UnifiedErrorStructure", localVarApiClient.parameterToString(xPBUnifiedErrorStructure));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2ClientCredentials" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCarrierSupportedDestinationValidateBeforeCall(Carrier carrier, ISOCountryCode originCountryCode, Boolean xPBUnifiedErrorStructure, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'carrier' is set
        if (carrier == null) {
            throw new ApiException("Missing the required parameter 'carrier' when calling getCarrierSupportedDestination(Async)");
        }
        
        // verify the required parameter 'originCountryCode' is set
        if (originCountryCode == null) {
            throw new ApiException("Missing the required parameter 'originCountryCode' when calling getCarrierSupportedDestination(Async)");
        }
        

        okhttp3.Call localVarCall = getCarrierSupportedDestinationCall(carrier, originCountryCode, xPBUnifiedErrorStructure, _callback);
        return localVarCall;

    }

    /**
     * This operation returns a list of supported destination countries to which the carrier offers international shipping services.
     * 
     * @param carrier The carrier name. Currently this must be set to: USPS (required)
     * @param originCountryCode The two-character ISO country code for the country where the shipment originates. (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getCarrierSupportedDestination(Carrier carrier, ISOCountryCode originCountryCode, Boolean xPBUnifiedErrorStructure) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getCarrierSupportedDestinationWithHttpInfo(carrier, originCountryCode, xPBUnifiedErrorStructure);
        return localVarResp.getData();
    }

    /**
     * This operation returns a list of supported destination countries to which the carrier offers international shipping services.
     * 
     * @param carrier The carrier name. Currently this must be set to: USPS (required)
     * @param originCountryCode The two-character ISO country code for the country where the shipment originates. (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getCarrierSupportedDestinationWithHttpInfo(Carrier carrier, ISOCountryCode originCountryCode, Boolean xPBUnifiedErrorStructure) throws ApiException {
        okhttp3.Call localVarCall = getCarrierSupportedDestinationValidateBeforeCall(carrier, originCountryCode, xPBUnifiedErrorStructure, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This operation returns a list of supported destination countries to which the carrier offers international shipping services. (asynchronously)
     * 
     * @param carrier The carrier name. Currently this must be set to: USPS (required)
     * @param originCountryCode The two-character ISO country code for the country where the shipment originates. (required)
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarrierSupportedDestinationAsync(Carrier carrier, ISOCountryCode originCountryCode, Boolean xPBUnifiedErrorStructure, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCarrierSupportedDestinationValidateBeforeCall(carrier, originCountryCode, xPBUnifiedErrorStructure, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
