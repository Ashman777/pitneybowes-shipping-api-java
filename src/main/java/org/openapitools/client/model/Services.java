/*
 * Shipping API
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The abbreviated name of the carrier-specific service. For abbreviations, see the Services table on the [carrier&#39;s reference page](https://shipping.pitneybowes.com/reference/carrier-services.html).   EM - Priority Mail Express | PM - Priority Mail | FCM - First-Class Mail | PRCLSEL - Parcel Select | STDPOST - Standard Post | LIB - Library Mail | MEDIA - Media Mail | PMOD - Priority Mail Open and Distribute | EMI - Priority Mail Express International | PMI - Priority Mail International | FCMI - First-Class Mail International | FCPIS - First-Class Package International Service. For overseas tracking,  [Do the APIs support E-USPS DELCON?](https://shipping.pitneybowes.com/faqs/shipments.html#usps-e-delcon-faq)
 */
@JsonAdapter(Services.Adapter.class)
public enum Services {
  
  EM("EM"),
  
  PM("PM"),
  
  FCM("FCM"),
  
  PRCLSEL("PRCLSEL"),
  
  STDPOST("STDPOST"),
  
  LIB("LIB"),
  
  MEDIA("MEDIA"),
  
  PMOD("PMOD"),
  
  EMI("EMI"),
  
  PMI("PMI"),
  
  FCMI("FCMI"),
  
  FCPIS("FCPIS"),
  
  BPM("BPM"),
  
  PSLW("PSLW"),
  
  STANDARD("STANDARD"),
  
  PBXPS("PBXPS"),
  
  PBXUS("PBXUS"),
  
  PBXPE("PBXPE"),
  
  NDA_AM("NDA_AM"),
  
  NDA("NDA"),
  
  NDA_SVR("NDA_SVR"),
  
  _2DA_AM("2DA_AM"),
  
  _2DA("2DA"),
  
  _3DA("3DA"),
  
  GRD("GRD"),
  
  HOM("HOM"),
  
  NDA_AM_FREIGHT("NDA_AM_FREIGHT"),
  
  NDA_FREIGHT("NDA_FREIGHT"),
  
  _2DA_FREIGHT("2DA_FREIGHT"),
  
  _3DA_FREIGHT("3DA_FREIGHT"),
  
  SP_PRE_STD("SP_PRE_STD"),
  
  SP_PRCLSEL("SP_PRCLSEL"),
  
  SP_MEDIA("SP_MEDIA"),
  
  SP_PRE_PRINT("SP_PRE_PRINT"),
  
  XPP("XPP"),
  
  EXP("EXP"),
  
  XPD("XPD"),
  
  STD("STD"),
  
  EXS("EXS"),
  
  EXP_FREIGHT("EXP_FREIGHT"),
  
  XPD_FREIGHT("XPD_FREIGHT");

  private String value;

  Services(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Services fromValue(String value) {
    for (Services b : Services.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Services> {
    @Override
    public void write(final JsonWriter jsonWriter, final Services enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Services read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Services.fromValue(value);
    }
  }
}

