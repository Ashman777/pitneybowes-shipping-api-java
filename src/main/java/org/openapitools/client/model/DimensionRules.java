/*
 * Shipping API
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.DimensionRulesMaxParcelDimensions;
import org.openapitools.client.model.DimensionRulesMinParcelDimensions;

/**
 * DimensionRules
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-08-27T12:03:32.867+05:30[Asia/Calcutta]")
public class DimensionRules {
  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_UNIT_OF_MEASUREMENT = "unitOfMeasurement";
  @SerializedName(SERIALIZED_NAME_UNIT_OF_MEASUREMENT)
  private String unitOfMeasurement;

  public static final String SERIALIZED_NAME_MIN_PARCEL_DIMENSIONS = "minParcelDimensions";
  @SerializedName(SERIALIZED_NAME_MIN_PARCEL_DIMENSIONS)
  private DimensionRulesMinParcelDimensions minParcelDimensions;

  public static final String SERIALIZED_NAME_MAX_PARCEL_DIMENSIONS = "maxParcelDimensions";
  @SerializedName(SERIALIZED_NAME_MAX_PARCEL_DIMENSIONS)
  private DimensionRulesMaxParcelDimensions maxParcelDimensions;

  public static final String SERIALIZED_NAME_MIN_LENGTH_PLUS_GIRTH = "minLengthPlusGirth";
  @SerializedName(SERIALIZED_NAME_MIN_LENGTH_PLUS_GIRTH)
  private Integer minLengthPlusGirth;

  public static final String SERIALIZED_NAME_MAX_LENGTH_PLUS_GIRTH = "maxLengthPlusGirth";
  @SerializedName(SERIALIZED_NAME_MAX_LENGTH_PLUS_GIRTH)
  private Integer maxLengthPlusGirth;


  public DimensionRules required(Boolean required) {
    
    this.required = required;
    return this;
  }

   /**
   * Get required
   * @return required
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRequired() {
    return required;
  }


  public void setRequired(Boolean required) {
    this.required = required;
  }


  public DimensionRules unitOfMeasurement(String unitOfMeasurement) {
    
    this.unitOfMeasurement = unitOfMeasurement;
    return this;
  }

   /**
   * Get unitOfMeasurement
   * @return unitOfMeasurement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUnitOfMeasurement() {
    return unitOfMeasurement;
  }


  public void setUnitOfMeasurement(String unitOfMeasurement) {
    this.unitOfMeasurement = unitOfMeasurement;
  }


  public DimensionRules minParcelDimensions(DimensionRulesMinParcelDimensions minParcelDimensions) {
    
    this.minParcelDimensions = minParcelDimensions;
    return this;
  }

   /**
   * Get minParcelDimensions
   * @return minParcelDimensions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DimensionRulesMinParcelDimensions getMinParcelDimensions() {
    return minParcelDimensions;
  }


  public void setMinParcelDimensions(DimensionRulesMinParcelDimensions minParcelDimensions) {
    this.minParcelDimensions = minParcelDimensions;
  }


  public DimensionRules maxParcelDimensions(DimensionRulesMaxParcelDimensions maxParcelDimensions) {
    
    this.maxParcelDimensions = maxParcelDimensions;
    return this;
  }

   /**
   * Get maxParcelDimensions
   * @return maxParcelDimensions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DimensionRulesMaxParcelDimensions getMaxParcelDimensions() {
    return maxParcelDimensions;
  }


  public void setMaxParcelDimensions(DimensionRulesMaxParcelDimensions maxParcelDimensions) {
    this.maxParcelDimensions = maxParcelDimensions;
  }


  public DimensionRules minLengthPlusGirth(Integer minLengthPlusGirth) {
    
    this.minLengthPlusGirth = minLengthPlusGirth;
    return this;
  }

   /**
   * Get minLengthPlusGirth
   * @return minLengthPlusGirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMinLengthPlusGirth() {
    return minLengthPlusGirth;
  }


  public void setMinLengthPlusGirth(Integer minLengthPlusGirth) {
    this.minLengthPlusGirth = minLengthPlusGirth;
  }


  public DimensionRules maxLengthPlusGirth(Integer maxLengthPlusGirth) {
    
    this.maxLengthPlusGirth = maxLengthPlusGirth;
    return this;
  }

   /**
   * Get maxLengthPlusGirth
   * @return maxLengthPlusGirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMaxLengthPlusGirth() {
    return maxLengthPlusGirth;
  }


  public void setMaxLengthPlusGirth(Integer maxLengthPlusGirth) {
    this.maxLengthPlusGirth = maxLengthPlusGirth;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DimensionRules dimensionRules = (DimensionRules) o;
    return Objects.equals(this.required, dimensionRules.required) &&
        Objects.equals(this.unitOfMeasurement, dimensionRules.unitOfMeasurement) &&
        Objects.equals(this.minParcelDimensions, dimensionRules.minParcelDimensions) &&
        Objects.equals(this.maxParcelDimensions, dimensionRules.maxParcelDimensions) &&
        Objects.equals(this.minLengthPlusGirth, dimensionRules.minLengthPlusGirth) &&
        Objects.equals(this.maxLengthPlusGirth, dimensionRules.maxLengthPlusGirth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(required, unitOfMeasurement, minParcelDimensions, maxParcelDimensions, minLengthPlusGirth, maxLengthPlusGirth);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DimensionRules {\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    unitOfMeasurement: ").append(toIndentedString(unitOfMeasurement)).append("\n");
    sb.append("    minParcelDimensions: ").append(toIndentedString(minParcelDimensions)).append("\n");
    sb.append("    maxParcelDimensions: ").append(toIndentedString(maxParcelDimensions)).append("\n");
    sb.append("    minLengthPlusGirth: ").append(toIndentedString(minLengthPlusGirth)).append("\n");
    sb.append("    maxLengthPlusGirth: ").append(toIndentedString(maxLengthPlusGirth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

