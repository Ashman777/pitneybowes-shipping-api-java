/*
 * Shipping API
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.pitneybowes.shippingapi.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * * LETTER -  Letter. Generates a First-Class label with IMB barcode.  * FRE - Flat rate envelope. * LGENV - Legal flat rate envelope. * LGLFRENV - Padded flat rate envelope. * PFRENV - Small flat rate box. * SFRB - Medium flat rate box. * FRB - Large Flat rate box. * LFRB - DVD box. * DVDBOX - DVDBOX. * VIDEOBOX - Video box. * MLFRB - Military flat raqte box. * RBA - Regional rate box, type A * RBB -  Regional rate box, type B. * PKG - Package (not eligible for special package rate). * LP - Large package. * FLAT - USPS Flat or Large Envelope. * EMMTB - Extended Managed Mail Tray Box. * FTB - Full tray box. * HTB - Half tray box. * SACK - Sack. * FTTB - Flat tub tray. * SOFTPACK - Soft Pack Envelope. * MIX - PMOD Enclosed Package Type. * LTR - Letter for stamp API call. 
 */
@JsonAdapter(ParcelType.Adapter.class)
public enum ParcelType {
  
  FLAT("FLAT"),
  
  LETTER("LETTER"),
  
  FRE("FRE"),
  
  LGENV("LGENV"),
  
  LGLFRENV("LGLFRENV"),
  
  PFRENV("PFRENV"),
  
  FRB("FRB"),
  
  LFRB("LFRB"),
  
  DVDBOX("DVDBOX"),
  
  VIDEOBOX("VIDEOBOX"),
  
  MLFRB("MLFRB"),
  
  RBA("RBA"),
  
  RBB("RBB"),
  
  LP("LP"),
  
  SACK("SACK"),
  
  SOFTPACK("SOFTPACK"),
  
  MIX("MIX"),
  
  LTR("LTR"),
  
  NMLETTER("NMLETTER"),
  
  NMLTR("NMLTR"),
  
  IRRPKG("IRRPKG"),
  
  SFRB("SFRB"),
  
  EMMTB("EMMTB"),
  
  FTB("FTB"),
  
  FTTB("FTTB"),
  
  HTB("HTB"),
  
  PACK("PACK"),
  
  BOX("BOX"),
  
  SMALL_EXP_BOX("SMALL_EXP_BOX"),
  
  MED_EXP_BOX("MED_EXP_BOX"),
  
  LG_EXP_BOX("LG_EXP_BOX"),
  
  EXTRA_LG_EXP_BOX("EXTRA_LG_EXP_BOX"),
  
  TUBE("TUBE"),
  
  _25KG("25KG"),
  
  _10KG("10KG"),
  
  PKG("PKG");

  private String value;

  ParcelType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ParcelType fromValue(String value) {
    for (ParcelType b : ParcelType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ParcelType> {
    @Override
    public void write(final JsonWriter jsonWriter, final ParcelType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ParcelType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ParcelType.fromValue(value);
    }
  }
}

